{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/validateForm.jsx","components/NewMovie/Input.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","validateForm","newPerson","errorsEntries","Object","entries","name","hasErrors","some","errors","reduce","acc","error","Input","props","value","handleChange","htmlFor","toUpperCase","type","id","onChange","initialValues","initialErrors","NewMovie","state","values","target","setState","prevState","handleSubmit","event","preventDefault","onSubmit","this","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"wxEAIaA,G,kBAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,OAAQC,EAA/B,EAA+BA,QAA/B,OACvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAMJ,GAAT,aAaRJ,EAAUS,aAAe,CACvBP,YAAa,ICxCR,IAAMQ,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACxB,yBAAKN,UAAU,UACZM,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAME,QAAYF,SAgBxCH,EAAWD,aAAe,CACxBE,OAAQ,I,kBC1BH,SAASK,EAAaC,GAC3B,IAAMC,EAAgBC,OAAOC,QAAQH,GAAWL,KAAI,YAAoB,IAAD,mBAAjBS,EAAiB,KAGrE,MAAO,CAACA,EAH6D,KAC/C,KAAH,gBAAmBA,EAAnB,oBAKfC,EAAYJ,EAAcK,MAAK,2CASrC,MAAO,CACLC,OARaN,EAAcO,QAAO,SAACC,EAAD,GAAyB,IAAD,mBAAjBL,EAAiB,KAAXM,EAAW,KAC1D,OAAO,2BACFD,GADL,kBAEGL,EAAOM,MAET,IAIDL,aCfG,IAAMM,EAAQ,SAACC,GAAW,IACvBC,EAAsCD,EAAtCC,MAAOjB,EAA+BgB,EAA/BhB,MAAOc,EAAwBE,EAAxBF,MAAOI,EAAiBF,EAAjBE,aAE7B,OACE,yBAAK1B,UAAS,gBAAWsB,EAAQ,QAAU,KACzC,2BAAOK,QAASnB,GACbA,EAAMoB,eAET,2BACEC,KAAK,OACLb,KAAMR,EACNsB,GAAItB,EACJiB,MAAOA,EACPM,SAAUL,IAEXJ,GACC,+BAAQA,KAahBC,EAAMnB,aAAe,CACnBkB,MAAO,MC5BT,IAAMhB,EAAS,CACb,QACA,cACA,SACA,UACA,UAGI0B,EAAgB1B,EAAOc,QAAO,SAACC,EAAKL,GACxC,OAAO,2BACFK,GADL,kBAEGL,EAAO,OAET,IAEGiB,EAAgB3B,EAAOc,QAAO,SAACC,EAAKL,GACxC,OAAO,2BACFK,GADL,kBAEGL,EAAO,SAET,IAEUkB,EAAb,4MACEC,MAAQ,CACNC,OAAQJ,EACRb,OAAQc,GAHZ,EAMEP,aAAe,YAAiB,IAAdW,EAAa,EAAbA,OAChB,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BH,OAAO,2BACFG,EAAUH,QADT,kBAEHC,EAAOrB,KAAOqB,EAAOZ,aAV9B,EAeEe,aAAe,SAACC,GACdA,EAAMC,iBADkB,IAEhBC,EAAa,EAAKnB,MAAlBmB,SAER,EAAKL,UAAS,SAACC,GAAe,IAAD,EAIvB5B,EAAa4B,EAAUH,QAFzBjB,EAFyB,EAEzBA,OAIF,OAN2B,EAGzBF,UAIO,CACLE,WAIJwB,EAASJ,EAAUH,QAEZ,CACLjB,SACAiB,OAAQJ,QAnChB,uDAwCY,IAAD,SACoBY,KAAKT,MAAxBC,EADD,EACCA,OAAQjB,EADT,EACSA,OAGhB,OACE,0BAAMnB,UAAU,UAAU2C,SAAUC,KAAKJ,cACtC1B,OAAOC,QAAQqB,GAAQ7B,KAAI,mCAAEC,EAAF,KAASiB,EAAT,YAC1B,kBAAC,EAAD,CACEhB,IAAKD,EACLA,MAAOA,EACPiB,MAAOA,EACPH,MAAOH,EAAOX,GACdkB,aAAc,EAAKA,kBAGvB,4BAAQG,KAAK,UAAb,WAvDR,GAA8BgB,a,QCrBjBC,EAAb,4MACEX,MAAQ,CACN7B,OAAQyC,GAFZ,EAKEC,SAAW,SAACxC,GACV,EAAK8B,UAAS,SAAAC,GAAS,MAAK,CAC1BjC,OAAO,GAAD,mBACDiC,EAAUjC,QADT,gBAGCE,UAVb,uDAgBY,IACAF,EAAWsC,KAAKT,MAAhB7B,OAER,OACE,yBAAKN,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYM,OAAQA,KAEtB,yBAAKN,UAAU,WACb,kBAAC,EAAD,CAAU2C,SAAUC,KAAKI,iBAzBnC,GAAyBH,aCDzBI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.414ecd16.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","export function validateForm(newPerson) {\n  const errorsEntries = Object.entries(newPerson).map(([name, value]) => {\n    const error = value ? null : `Field ${name} is required`;\n\n    return [name, error];\n  });\n\n  const hasErrors = errorsEntries.some(([, error]) => !!error);\n\n  const errors = errorsEntries.reduce((acc, [name, error]) => {\n    return {\n      ...acc,\n      [name]: error,\n    };\n  }, {});\n\n  return {\n    errors,\n    hasErrors,\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Input = (props) => {\n  const { value, movie, error, handleChange } = props;\n\n  return (\n    <div className={`field ${error ? 'error' : ''}`}>\n      <label htmlFor={movie}>\n        {movie.toUpperCase()}\n      </label>\n      <input\n        type=\"text\"\n        name={movie}\n        id={movie}\n        value={value}\n        onChange={handleChange}\n      />\n      {error && (\n        <label>{error}</label>\n      )}\n    </div>\n  );\n};\n\nInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  movie: PropTypes.string.isRequired,\n  error: PropTypes.string,\n  handleChange: PropTypes.func.isRequired,\n};\n\nInput.defaultProps = {\n  error: null,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { validateForm } from './validateForm';\nimport { Input } from './Input';\n\nconst movies = [\n  'title',\n  'description',\n  'imgUrl',\n  'imdbUrl',\n  'imdbId',\n];\n\nconst initialValues = movies.reduce((acc, name) => {\n  return {\n    ...acc,\n    [name]: '',\n  };\n}, {});\n\nconst initialErrors = movies.reduce((acc, name) => {\n  return {\n    ...acc,\n    [name]: null,\n  };\n}, {});\n\nexport class NewMovie extends Component {\n  state = {\n    values: initialValues,\n    errors: initialErrors,\n  };\n\n  handleChange = ({ target }) => {\n    this.setState(prevState => ({\n      values: {\n        ...prevState.values,\n        [target.name]: target.value,\n      },\n    }));\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { onSubmit } = this.props;\n\n    this.setState((prevState) => {\n      const {\n        errors,\n        hasErrors,\n      } = validateForm(prevState.values);\n\n      if (hasErrors) {\n        return {\n          errors,\n        };\n      }\n\n      onSubmit(prevState.values);\n\n      return {\n        errors,\n        values: initialValues,\n      };\n    });\n  };\n\n  render() {\n    const { values, errors } = this.state;\n    // console.log(errors);\n\n    return (\n      <form className=\"ui form\" onSubmit={this.handleSubmit}>\n        {Object.entries(values).map(([movie, value]) => (\n          <Input\n            key={movie}\n            movie={movie}\n            value={value}\n            error={errors[movie]}\n            handleChange={this.handleChange}\n          />\n        ))}\n        <button type=\"submit\">Ok</button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => ({\n      movies: [\n        ...prevState.movies,\n        {\n          ...movie,\n        },\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onSubmit={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}